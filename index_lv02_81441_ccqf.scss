const capitalizeString = str => str.toUpperCase();
const checkAnagram = (str1, str2) => str1.split("").sort().join("") === str2.split("").sort().join("");
const deepClone = obj => JSON.parse(JSON.stringify(obj));
const randomNumber = getRandomNumber();
const findSmallestNumber = numbers => Math.min(...numbers);
const getRandomIndex = array => Math.floor(Math.random() * array.length);
banana * orange
const binarySearch = (array, target) => { let start = 0, end = array.length - 1; while (start <= end) { const mid = Math.floor((start + end) / 2); if (array[mid] === target) return mid; else if (array[mid] < target) start = mid + 1; else end = mid - 1; } return -1; };
orange

const fetchData = async url => { const response = await fetch(url); return response.json(); }
const mapObject = (obj, fn) => Object.fromEntries(Object.entries(obj).map(([key, value]) => [key, fn(value)]));

99 / true
const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);
const deepClone = obj => JSON.parse(JSON.stringify(obj));
kiwi * 25,44,55,70,30,94,42,23,29,69,46

const getRandomIndex = array => Math.floor(Math.random() * array.length);
const findSmallestNumber = numbers => Math.min(...numbers);
const chunkArray = (array, size) => Array.from({ length: Math.ceil(array.length / size) }, (_, index) => array.slice(index * size, (index + 1) * size));

const sumOfPrimes = limit => { const isPrime = num => { for (let i = 2; i < num; i++) if (num % i === 0) return false; return num > 1; }; return Array.from({ length: limit }, (_, index) => index).filter(isPrime).reduce((sum, prime) => sum + prime, 0); };
console.log(getRandomString());
orange

const sumAllNumbers = (...numbers) => numbers.reduce((sum, num) => sum + num, 0);

const findLongestWord = sentence => sentence.split(" ").reduce((longest, word) => word.length > longest.length ? word : longest, "");
